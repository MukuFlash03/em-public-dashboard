name: docker-image-push-public-dash

on:
  push:
    branches: [ main, cleanup-cicd ]

  workflow_dispatch:
    inputs:
      docker_image_tag:
        description: "Latest Docker image tags passed from e-mission-server repository on image build and push"
        required: true

env:
  DOCKER_USER: ${{secrets.DOCKER_USER}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}

jobs:
  build:
    runs-on: ubuntu-latest
      
    steps:
    - uses: actions/checkout@v4

    - name: Set docker image tags
      id: set-tags
      run: |
        set -a; source .env.tags; set +a
        echo "PUBLIC_DASH_NOTEBOOK_IMAGE_TAG=${PUBLIC_DASH_NOTEBOOK_IMAGE_TAG}" >> "$GITHUB_OUTPUT"
        echo "PUBLIC_DASH_FRONTEND_IMAGE_TAG=${PUBLIC_DASH_FRONTEND_IMAGE_TAG}" >> "$GITHUB_OUTPUT"
        echo "DOCKER_TAG_FROM_PUSH=${SERVER_IMAGE_TAG}" >> "$GITHUB_OUTPUT"
        echo "DOCKER_TAG_FROM_WORKFLOW_DISPATCH=${{ github.event.inputs.docker_image_tag }}" >> "$GITHUB_OUTPUT"

    - name: Print input docker image tags
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Current notebook image tag (push): ${{ steps.set-tags.outputs.PUBLIC_DASH_NOTEBOOK_IMAGE_TAG }}"
        echo "Current frontend image tag (push): ${{ steps.set-tags.outputs.PUBLIC_DASH_FRONTEND_IMAGE_TAG }}"
        echo "Latest docker image tag (push): ${{ steps.set-tags.outputs.DOCKER_TAG_FROM_PUSH }}"
        echo "Latest docker image tag (workflow_dispatch): ${{ steps.set-tags.outputs.DOCKER_TAG_FROM_WORKFLOW_DISPATCH }}"

    - name: docker login
      run: | # log into docker hub account
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

    - name: Get current date # get the date of the build
      id: date
      run: echo "date=$(date +'%Y-%m-%d--%M-%S')" >> "$GITHUB_OUTPUT"

    - name: Run a one-line script
      run: echo running in repo ${GITHUB_REPOSITORY#*/} branch ${GITHUB_REF##*/} on ${{ steps.date.outputs.date }}

    - name: build docker image
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          SERVER_IMAGE_TAG=${{ steps.set-tags.outputs.DOCKER_TAG_FROM_WORKFLOW_DISPATCH }} docker compose -f docker-compose.yml build
        else
          SERVER_IMAGE_TAG=${{ steps.set-tags.outputs.DOCKER_TAG_FROM_PUSH }} docker compose -f docker-compose.yml build
        fi
        docker images

    - name: rename docker images
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          docker image tag em-pub-dash-prod/frontend:latest $DOCKER_USER/${GITHUB_REPOSITORY#*/}_frontend:${GITHUB_REF##*/}_${{ steps.date.outputs.date }}
        fi
        docker image tag em-pub-dash-prod/viz-scripts:latest $DOCKER_USER/${GITHUB_REPOSITORY#*/}_notebook:${GITHUB_REF##*/}_${{ steps.date.outputs.date }}

    - name: push docker images
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          docker push $DOCKER_USER/${GITHUB_REPOSITORY#*/}_frontend:${GITHUB_REF##*/}_${{ steps.date.outputs.date }}
        fi
        docker push $DOCKER_USER/${GITHUB_REPOSITORY#*/}_notebook:${GITHUB_REF##*/}_${{ steps.date.outputs.date }}

    - name: Update .env.tags file 
      run: |
        echo "PUBLIC_DASH_NOTEBOOK_IMAGE_TAG=${{ steps.date.outputs.date }}" > .env.tags
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "Workflow_dispatch: New server image built and pushed; update server image tag; reuse existing frontend image tag"
          echo "PUBLIC_DASH_FRONTEND_IMAGE_TAG=${{ steps.set-tags.outputs.PUBLIC_DASH_FRONTEND_IMAGE_TAG }}" >> .env.tags
          echo "SERVER_IMAGE_TAG=${{ steps.set-tags.outputs.DOCKER_TAG_FROM_WORKFLOW_DISPATCH }}" >> .env.tags
        else
          echo "Push event: Reuse existing server image tag"
          echo "PUBLIC_DASH_FRONTEND_IMAGE_TAG=${{ steps.date.outputs.date }}" >> .env.tags
          echo "SERVER_IMAGE_TAG=${{ steps.set-tags.outputs.DOCKER_TAG_FROM_PUSH }}" >> .env.tags
        fi
  
    - name: Add, Commit, Push changes to .env.tags file
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Github Actions bot to update .env.tags with latest tags"
        if git diff --quiet; then
          echo "Latest timestamp already present in .env.tags file, no changes to commit"
        else
          git add .env.tags
          git commit -m "Updated docker image tags in .env.tags file to the latest timestamp"
          git push origin 
        fi
   
    - name: Create artifact text files
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          echo ${{ steps.date.outputs.date }} > frontend_tag_file.txt
        else
          echo ${{ steps.set-tags.outputs.PUBLIC_DASH_FRONTEND_IMAGE_TAG }} > frontend_tag_file.txt
        fi
        echo ${{ steps.date.outputs.date }} > notebook_tag_file.txt
        echo "Created tag text files"

    - name: Upload Frontend Tag Artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-image-tag
        path: frontend_tag_file.txt
        overwrite: true
  
    - name: Upload Notebook Tag Artifact
      uses: actions/upload-artifact@v4
      with:
        name: notebook-image-tag
        path: notebook_tag_file.txt
        overwrite: true
